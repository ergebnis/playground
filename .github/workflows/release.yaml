# https://docs.github.com/en/actions

name: "Release"

on: # yamllint disable-line rule:truthy
  push:
    tags:
      - "**"

jobs:
  release:
    name: "Release"

    runs-on: "ubuntu-latest"

    env:
      COMPOSER_NORMALIZE_PHAR: ".build/phar/composer-normalize.phar"
      COMPOSER_NORMALIZE_PHAR_SIGNATURE: ".build/phar/composer-normalize.phar.asc"

    steps:
      - name: "Determine tag"
        run: "echo \"RELEASE_TAG=${GITHUB_REF#refs/tags/}\" >> $GITHUB_ENV"

      - name: "Create release"
        uses: "actions/github-script@v5"
        with:
          github-token: "${{ secrets.ERGEBNIS_BOT_TOKEN }}"
          script: |
            try {
              await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.RELEASE_TAG,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG,
              });
            } catch (error) {
              core.setFailed(error.message);
            }

      - name: "Create release asset directory"
        run: "mkdir -p .build/phar/"

      - name: "Create release assets"
        run: "touch ${{ env.COMPOSER_NORMALIZE_PHAR }} ${{ env.COMPOSER_NORMALIZE_PHAR_SIGNATURE }}"

      - name: "List release assets"
        run: "ls -la .build/phar/"

      - name: "Upload release assets"
        uses: "actions/github-script@v6"
        with:
          debug: true
          github-token: "${{ secrets.ERGEBNIS_BOT_TOKEN }}"
          script: |
            const fs = require("fs");

            const files = [
              {
                name: "composer-normalize.phar",
                path: process.env.COMPOSER_NORMALIZE_PHAR,
              },
              {
                name: "composer-normalize.phar.asc",
                path: process.env.COMPOSER_NORMALIZE_PHAR_SIGNATURE,
              },
            ];

            for (const file of files) {
              try {
                await github.rest.repos.uploadReleaseAsset({
                  data: fs.readFileSync(file.path),
                  name: file.name,
                  origin: process.env.RELEASE_UPLOAD_URL,
                  owner: context.repo.owner,
                  release_id: process.env.RELEASE_ID,
                  repo: context.repo.repo,
                });
              } catch (error) {
                core.setFailed(error.message);
              }
            }
